import requests

# –ú–∏ –±–∞—á–∏–º–æ, —â–æ –≤ —Å–µ—Ä–≤–∏—Å—ñ transport_stage:
#   id=6  ‚Üí "–ú–∞—Ä—à—Ä—É—Ç–Ω–µ —Ç–∞–∫—Å—ñ"  (geometryType = esriGeometryPolyline)
#
FEATURESERVER_BASE = (
    "https://gisserver-stage.kyivcity.gov.ua/"
    "mayno/rest/services/KYIV_API/—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç_stage/FeatureServer"
)
MARSHRUTKA_LAYER_ID = 6  # —Å–∞–º–µ —Ü–µ–π ID –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞ ¬´–ú–∞—Ä—à—Ä—É—Ç–Ω–µ —Ç–∞–∫—Å—ñ¬ª —É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç_stage
MARSHRUTKA_LAYER_URL = f"{FEATURESERVER_BASE}/{MARSHRUTKA_LAYER_ID}/query"

GEOCODE_HEADERS = {
    "User-Agent": "MyTransitApp/Debug (dump_marshrutki)"
}

def dump_all_marshrutka_features():
    params = {
        "where": "1=1",
        "outFields": "from_code1,to_code1,num_route",
        "returnGeometry": True,
        "f": "json"    # ‚áê ArcGIS JSON (–Ω–µ 'geojson')
    }

    try:
        resp = requests.get(
            MARSHRUTKA_LAYER_URL,
            params=params,
            headers=GEOCODE_HEADERS,
            timeout=10
        )
        resp.raise_for_status()
    except Exception as e:
        print("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–∞–ø–∏—Ç—É –¥–æ —à–∞—Ä—É 6 (–ú–∞—Ä—à—Ä—É—Ç–Ω–µ —Ç–∞–∫—Å—ñ):", e)
        return

    data = resp.json()

    # –Ø–∫—â–æ ArcGIS –ø–æ–≤–µ—Ä–Ω—É–≤ –ø–æ–º–∏–ª–∫—É –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ JSON
    if "error" in data:
        print("‚ùå ArcGIS‚Äê–ø–æ–º–∏–ª–∫–∞:", data["error"])
        return

    features = data.get("features", [])
    if not features:
        print("‚ö† –®–∞—Ä 6 –ø–æ–≤–µ—Ä–Ω—É–≤ 0 —Ñ—ñ—á. –ú–æ–∂–ª–∏–≤–æ, –∑–∞—Ä–∞–∑ (—É transport_stage) –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ –º–∞—Ä—à—Ä—É—Ç–∫–∏.")
        return

    print(f"üîπ –ó–Ω–∞–π–¥–µ–Ω–æ {len(features)} —Ñ—ñ—á —É —à–∞—Ä—ñ 6 (–ú–∞—Ä—à—Ä—É—Ç–Ω–µ —Ç–∞–∫—Å—ñ, transport_stage):\n")
    for i, feat in enumerate(features, start=1):
        # –£ ArcGIS JSON —É—Å—ñ –∞—Ç—Ä–∏–±—É—Ç–∏ –ª–µ–∂–∞—Ç—å —É feat['attributes'], –∞ –Ω–µ —É 'properties'
        attrs = feat.get("attributes", {})
        a = attrs.get("from_code1", "")
        b = attrs.get("to_code1", "")
        raw_route = str(attrs.get("num_route", "") or "")
        route = raw_route.split("_")[0]

        # –ì–µ–æ–º–µ—Ç—Ä—ñ—è –ª–µ–∂–∏—Ç—å —É feat['geometry']
        geom = feat.get("geometry", {})
        paths = geom.get("paths", None)
        coords = geom.get("coordinates", None)

        if paths and isinstance(paths, list) and len(paths) > 0:
            total_points = sum(len(path) for path in paths)
            geom_desc = f"paths (–º–Ω–æ–∂–∏–Ω–∞ –ª—ñ–Ω—ñ–π, {len(paths)} —á–∞—Å—Ç–∏–Ω, {total_points} —Ç–æ—á–æ–∫)"
        elif coords and isinstance(coords, list):
            # coords –º–æ–∂–µ –±—É—Ç–∏ –∞–±–æ [[lon,lat],‚Ä¶] (single line), –∞–±–æ [[[lon,lat],‚Ä¶], ‚Ä¶] (multiline)
            if isinstance(coords[0], list) and isinstance(coords[0][0], list):
                total_points = sum(len(line) for line in coords)
                geom_desc = f"coordinates (–º–Ω–æ–∂–∏–Ω–∞ –ª—ñ–Ω—ñ–π, {len(coords)} —á–∞—Å—Ç–∏–Ω, {total_points} —Ç–æ—á–æ–∫)"
            else:
                total_points = len(coords)
                geom_desc = f"coordinates (single line, {total_points} —Ç–æ—á–æ–∫)"
        else:
            geom_desc = "–±–µ–∑ –≥–µ–æ–º–µ—Ç—Ä—ñ—ó"

        print(f"#{i}: –º–∞—Ä—à—Ä—É—Ç {route}, –∑—É–ø. {a} ‚Üí {b}, –≥–µ–æ–º–µ—Ç—Ä—ñ—è: {geom_desc}")

if __name__ == "__main__":
    dump_all_marshrutka_features()
